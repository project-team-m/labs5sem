CREATE TABLE IF NOT EXISTS my_object
(
    id          integer   NOT NULL,
    time_create timestamp NOT NULL,
    time_dead   timestamp,
    PRIMARY KEY (id, time_create)
);

CREATE TABLE IF NOT EXISTS tabl1
(
    names varchar(10) NOT NULL
)
    INHERITS (my_object);

CREATE TABLE IF NOT EXISTS tabl2
(
    names varchar(10) NOT NULL
)
    INHERITS (my_object);

CREATE TABLE IF NOT EXISTS tabl3
(
    names varchar(10) NOT NULL
)
    INHERITS (my_object);

CREATE TABLE IF NOT EXISTS tabl4
(
    names varchar(10) NOT NULL
)
    INHERITS (my_object);

CREATE TABLE IF NOT EXISTS tabl5
(
    names varchar(10) NOT NULL
)
    INHERITS (my_object);

CREATE OR REPLACE FUNCTION handler_live() RETURNS TRIGGER AS
$handler_live$
BEGIN
    IF (NEW.id IN (SELECT id FROM tabl1))
    THEN
        NEW.time_create := current_timestamp(0);
        UPDATE tabl1
        SET time_dead = NEW.time_create
        WHERE id = NEW.id
          AND time_dead IS NULL;
        RETURN NEW;
    ELSE
        NEW.time_create := current_timestamp(0);
        RETURN NEW;
    END IF;
END;
$handler_live$ LANGUAGE plpgsql;

CREATE TRIGGER handler_live
    BEFORE INSERT
    ON tabl1
    FOR EACH ROW
EXECUTE PROCEDURE handler_live();

CREATE OR REPLACE FUNCTION constantination ( old varchar , new varchar)
     RETURNS varchar as $$
begin
    RETURN old ||  '|' || new ;
 end;
$$   LANGUAGE 'plpgsql';


CREATE AGGREGATE print (  varchar )
(
    sfunc = constantination,
    stype = varchar,
    initcond = ' '
);

DROP function if EXISTS constantination  CASCADE;
DROP AGGREGATE if EXISTS print (varchar);

SELECT id, time_create, time_dead,
       print(names) OVER (PARTITION BY id)
FROM tabl1

CREATE INDEX HELPER ON tabl1 (id , time_create);
